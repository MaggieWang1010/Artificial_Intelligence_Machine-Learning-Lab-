# -*- coding: utf-8 -*-
"""Matplotlib-III.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WDViVk8GW2EwP6bZNIj35jpokXzDwcJh
"""

#In this lab, process map related data visualization topic discussion in the future AI algorithm analysis through function call in matplotlib library.
#-----------------Subplots------------------------
import random
import matplotlib.pyplot as plt
from matplotlib import style
# %matplotlib notebook
style.use('fivethirtyeight') # Style w/o borders in the plot
fig = plt.figure()
def create_plots():
 xs = []
 ys = []
 for i in range(10):
  x = i
  y = random.randrange(10)
  xs.append(x)
  ys.append(y)
 return xs, ys
ax1 = plt.subplot2grid((6,1),(0,0), rowspan = 1, colspan = 1)
ax2 = plt.subplot2grid((6,1),(1,0), rowspan = 4, colspan = 1)
ax3 = plt.subplot2grid((6,1),(5,0), rowspan = 1, colspan = 1)
# ax1 = fig.add_subplot(2,2,1)
# ax2 = fig.add_subplot(2,2,2)
# ax3 = fig.add_subplot(2,1,2)
x,y = create_plots()
ax1.plot(x,y)
x,y = create_plots()
ax2.plot(x,y)
x,y = create_plots()
ax3.plot(x,y)
plt.show()

#-------------------Basemap introduction-----------------------
!apt-get install libgeos-3.5.0
!apt-get install libgeos-dev
!pip install https://github.com/matplotlib/basemap/archive/master.zip
from mpl_toolkits.basemap import Basemap # create map plots in python
import matplotlib.pyplot as plt
m = Basemap(projection = 'mill') # Miller cylindrical projection
m.drawcoastlines()
m.fillcontinents()
plt.title('Basemap Tutorial')
plt.show()

#------------------Basemap customization options-----------------
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
m = Basemap(projection='mill',
            llcrnrlat = -90, # latitude: like y’s value; llcrnr: lower left corner
            llcrnrlon = -180, # longitude: like x’s value
            urcrnrlat = 90, # urcrnr: upper right corner
            urcrnrlon = 180)
m.drawcoastlines()
m.drawcountries(linewidth=2)
m.drawstates(color='b') # draw states in each countries
m.drawcounties(color='darkred') # draw counties in each countries
m.etopo() # display topography
plt.title('Basemap Tutorial')
plt.show()

#---------------------Plotting coordinates on a map with Basemap ---------------
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
m = Basemap(projection='mill', # Cover US map
            llcrnrlat = 25,
            llcrnrlon = -130,
            urcrnrlat = 50,
            urcrnrlon = -60,
            resolution='l')
m.drawcoastlines()
m.drawcountries(linewidth=2)
m.drawstates(color='b')
#m.drawcounties(color='darkred')
#m.fillcontinents()
#m.etopo()
#m.bluemarble()
xs = []
ys = []
NYClat, NYClon = 40.7127, -74.0059
xpt, ypt = m(NYClon, NYClat)
xs.append(xpt)
ys.append(ypt)
m.plot(xpt, ypt, 'c*', markersize=15)
LAlat, LAlon = 34.05, -118.25
xpt, ypt = m(LAlon, LAlat)
xs.append(xpt)
ys.append(ypt)
m.plot(xpt, ypt, 'g^', markersize=15)
m.plot(xs, ys, color='r', linewidth=3, label='Flight 98')
m.drawgreatcircle(NYClon, NYClat, LAlon, LAlat, color='c', linewidth=3, label='Arc')
plt.legend(loc=4)
plt.title('Basemap Tutorial')
plt.show()

#-----------------3D graphs with Matplotlib----------------------
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d
import numpy as np
figure = plt.figure()
axis = figure.add_subplot(111, projection = '3d')
x = [1,2,3,4,5,6,7,8,9,10]
y = [5,6,7,8,2,5,6,3,7,2]
z = np.array([[1,2,6,3,2,7,3,3,7,2],[1,2,6,3,2,7,3,3,7,2]])
axis.plot_wireframe(x, y, z)
axis.set_xlabel('x-axis')
axis.set_ylabel('y-axis')
axis.set_zlabel('z-axis')

plt.show()

#-----------------3D Scatter Plot with Matplotlib---------------------
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')
fig = plt.figure()
ax1 = fig.add_subplot(111, projection='3d') # same as subplot(1,1,1)
x = [1,2,3,4,5,6,7,8,9,10]
y = [5,6,7,8,2,5,6,3,7,2]
z = [1,2,6,3,2,7,3,3,7,2]
x2 = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
y2 = [-5,-6,-7,-8,-2,-5,-6,-3,-7,-2]
z2 = [1,2,6,3,2,7,3,3,7,2]
ax1.scatter(x, y, z, c='g', marker='o')
ax1.scatter(x2, y2, z2, c ='r', marker='o')
ax1.set_xlabel('x axis')
ax1.set_ylabel('y axis')
ax1.set_zlabel('z axis')
plt.show()

#---------------------3D Bar Chart with Matplotlib--------------------
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import style
style.use('ggplot')
fig = plt.figure()
ax1 = fig.add_subplot(111, projection='3d')
x3 = [1,2,3,4,5,6,7,8,9,10]
y3 = [5,6,7,8,2,5,6,3,7,2]
z3 = np.zeros(10)
dx = np.ones(10)
dy = np.ones(10)
dz = [1,2,3,4,5,6,7,8,9,10]
ax1.bar3d(x3, y3, z3, dx, dy, dz)
ax1.set_xlabel('x axis')
ax1.set_ylabel('y axis')
ax1.set_zlabel('z axis')
plt.show()

#------------------Conclusion--------------
import numpy as np
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style
# %matplotlib notebook
style.use('fivethirtyeight')
fig = plt.figure()
ax1 = fig.add_subplot(1,1,1, projection = '3d')
x, y, z = axes3d.get_test_data()
# print(axes3d.__file__)
ax1.plot_wireframe(x, y, z, rstride = 5, cstride = 5)
ax1.set_xlabel('x axis')
ax1.set_ylabel('y axis')
ax1.set_zlabel('z axis')
plt.show()